# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_acqiris_QuantroDLL2', [dirname(__file__)])
        except ImportError:
            import _acqiris_QuantroDLL2
            return _acqiris_QuantroDLL2
        if fp is not None:
            try:
                _mod = imp.load_module('_acqiris_QuantroDLL2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _acqiris_QuantroDLL2 = swig_import_helper()
    del swig_import_helper
else:
    import _acqiris_QuantroDLL2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _acqiris_QuantroDLL2.SwigPyIterator_value(self)
    def incr(self, n=1): return _acqiris_QuantroDLL2.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _acqiris_QuantroDLL2.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator_equal(self, *args)
    def copy(self): return _acqiris_QuantroDLL2.SwigPyIterator_copy(self)
    def next(self): return _acqiris_QuantroDLL2.SwigPyIterator_next(self)
    def __next__(self): return _acqiris_QuantroDLL2.SwigPyIterator___next__(self)
    def previous(self): return _acqiris_QuantroDLL2.SwigPyIterator_previous(self)
    def advance(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _acqiris_QuantroDLL2.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _acqiris_QuantroDLL2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _acqiris_QuantroDLL2.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _acqiris_QuantroDLL2.IntVector___nonzero__(self)
    def __bool__(self): return _acqiris_QuantroDLL2.IntVector___bool__(self)
    def __len__(self): return _acqiris_QuantroDLL2.IntVector___len__(self)
    def pop(self): return _acqiris_QuantroDLL2.IntVector_pop(self)
    def __getslice__(self, *args): return _acqiris_QuantroDLL2.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _acqiris_QuantroDLL2.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _acqiris_QuantroDLL2.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _acqiris_QuantroDLL2.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _acqiris_QuantroDLL2.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _acqiris_QuantroDLL2.IntVector___setitem__(self, *args)
    def append(self, *args): return _acqiris_QuantroDLL2.IntVector_append(self, *args)
    def empty(self): return _acqiris_QuantroDLL2.IntVector_empty(self)
    def size(self): return _acqiris_QuantroDLL2.IntVector_size(self)
    def clear(self): return _acqiris_QuantroDLL2.IntVector_clear(self)
    def swap(self, *args): return _acqiris_QuantroDLL2.IntVector_swap(self, *args)
    def get_allocator(self): return _acqiris_QuantroDLL2.IntVector_get_allocator(self)
    def begin(self): return _acqiris_QuantroDLL2.IntVector_begin(self)
    def end(self): return _acqiris_QuantroDLL2.IntVector_end(self)
    def rbegin(self): return _acqiris_QuantroDLL2.IntVector_rbegin(self)
    def rend(self): return _acqiris_QuantroDLL2.IntVector_rend(self)
    def pop_back(self): return _acqiris_QuantroDLL2.IntVector_pop_back(self)
    def erase(self, *args): return _acqiris_QuantroDLL2.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _acqiris_QuantroDLL2.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _acqiris_QuantroDLL2.IntVector_push_back(self, *args)
    def front(self): return _acqiris_QuantroDLL2.IntVector_front(self)
    def back(self): return _acqiris_QuantroDLL2.IntVector_back(self)
    def assign(self, *args): return _acqiris_QuantroDLL2.IntVector_assign(self, *args)
    def resize(self, *args): return _acqiris_QuantroDLL2.IntVector_resize(self, *args)
    def insert(self, *args): return _acqiris_QuantroDLL2.IntVector_insert(self, *args)
    def reserve(self, *args): return _acqiris_QuantroDLL2.IntVector_reserve(self, *args)
    def capacity(self): return _acqiris_QuantroDLL2.IntVector_capacity(self)
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _acqiris_QuantroDLL2.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _acqiris_QuantroDLL2.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _acqiris_QuantroDLL2.DoubleVector___nonzero__(self)
    def __bool__(self): return _acqiris_QuantroDLL2.DoubleVector___bool__(self)
    def __len__(self): return _acqiris_QuantroDLL2.DoubleVector___len__(self)
    def pop(self): return _acqiris_QuantroDLL2.DoubleVector_pop(self)
    def __getslice__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _acqiris_QuantroDLL2.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _acqiris_QuantroDLL2.DoubleVector_append(self, *args)
    def empty(self): return _acqiris_QuantroDLL2.DoubleVector_empty(self)
    def size(self): return _acqiris_QuantroDLL2.DoubleVector_size(self)
    def clear(self): return _acqiris_QuantroDLL2.DoubleVector_clear(self)
    def swap(self, *args): return _acqiris_QuantroDLL2.DoubleVector_swap(self, *args)
    def get_allocator(self): return _acqiris_QuantroDLL2.DoubleVector_get_allocator(self)
    def begin(self): return _acqiris_QuantroDLL2.DoubleVector_begin(self)
    def end(self): return _acqiris_QuantroDLL2.DoubleVector_end(self)
    def rbegin(self): return _acqiris_QuantroDLL2.DoubleVector_rbegin(self)
    def rend(self): return _acqiris_QuantroDLL2.DoubleVector_rend(self)
    def pop_back(self): return _acqiris_QuantroDLL2.DoubleVector_pop_back(self)
    def erase(self, *args): return _acqiris_QuantroDLL2.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _acqiris_QuantroDLL2.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _acqiris_QuantroDLL2.DoubleVector_push_back(self, *args)
    def front(self): return _acqiris_QuantroDLL2.DoubleVector_front(self)
    def back(self): return _acqiris_QuantroDLL2.DoubleVector_back(self)
    def assign(self, *args): return _acqiris_QuantroDLL2.DoubleVector_assign(self, *args)
    def resize(self, *args): return _acqiris_QuantroDLL2.DoubleVector_resize(self, *args)
    def insert(self, *args): return _acqiris_QuantroDLL2.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _acqiris_QuantroDLL2.DoubleVector_reserve(self, *args)
    def capacity(self): return _acqiris_QuantroDLL2.DoubleVector_capacity(self)
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _acqiris_QuantroDLL2.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)


def initacqiris_QuantroDLL2():
  return _acqiris_QuantroDLL2.initacqiris_QuantroDLL2()
initacqiris_QuantroDLL2 = _acqiris_QuantroDLL2.initacqiris_QuantroDLL2
class BifurcationMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BifurcationMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BifurcationMap, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_BifurcationMap
    __del__ = lambda self : None;
    def __init__(self): 
        this = _acqiris_QuantroDLL2.new_BifurcationMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["rotation"] = _acqiris_QuantroDLL2.BifurcationMap_rotation_set
    __swig_getmethods__["rotation"] = _acqiris_QuantroDLL2.BifurcationMap_rotation_get
    if _newclass:rotation = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_rotation_get, _acqiris_QuantroDLL2.BifurcationMap_rotation_set)
    __swig_setmethods__["costable"] = _acqiris_QuantroDLL2.BifurcationMap_costable_set
    __swig_getmethods__["costable"] = _acqiris_QuantroDLL2.BifurcationMap_costable_get
    if _newclass:costable = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_costable_get, _acqiris_QuantroDLL2.BifurcationMap_costable_set)
    __swig_setmethods__["sintable"] = _acqiris_QuantroDLL2.BifurcationMap_sintable_set
    __swig_getmethods__["sintable"] = _acqiris_QuantroDLL2.BifurcationMap_sintable_get
    if _newclass:sintable = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_sintable_get, _acqiris_QuantroDLL2.BifurcationMap_sintable_set)
    __swig_setmethods__["rotatedWaveform"] = _acqiris_QuantroDLL2.BifurcationMap_rotatedWaveform_set
    __swig_getmethods__["rotatedWaveform"] = _acqiris_QuantroDLL2.BifurcationMap_rotatedWaveform_get
    if _newclass:rotatedWaveform = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_rotatedWaveform_get, _acqiris_QuantroDLL2.BifurcationMap_rotatedWaveform_set)
    __swig_setmethods__["means"] = _acqiris_QuantroDLL2.BifurcationMap_means_set
    __swig_getmethods__["means"] = _acqiris_QuantroDLL2.BifurcationMap_means_get
    if _newclass:means = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_means_get, _acqiris_QuantroDLL2.BifurcationMap_means_set)
    __swig_setmethods__["trends"] = _acqiris_QuantroDLL2.BifurcationMap_trends_set
    __swig_getmethods__["trends"] = _acqiris_QuantroDLL2.BifurcationMap_trends_get
    if _newclass:trends = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_trends_get, _acqiris_QuantroDLL2.BifurcationMap_trends_set)
    __swig_setmethods__["averages"] = _acqiris_QuantroDLL2.BifurcationMap_averages_set
    __swig_getmethods__["averages"] = _acqiris_QuantroDLL2.BifurcationMap_averages_get
    if _newclass:averages = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_averages_get, _acqiris_QuantroDLL2.BifurcationMap_averages_set)
    __swig_setmethods__["probabilities"] = _acqiris_QuantroDLL2.BifurcationMap_probabilities_set
    __swig_getmethods__["probabilities"] = _acqiris_QuantroDLL2.BifurcationMap_probabilities_get
    if _newclass:probabilities = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_probabilities_get, _acqiris_QuantroDLL2.BifurcationMap_probabilities_set)
    __swig_setmethods__["crossProbabilities"] = _acqiris_QuantroDLL2.BifurcationMap_crossProbabilities_set
    __swig_getmethods__["crossProbabilities"] = _acqiris_QuantroDLL2.BifurcationMap_crossProbabilities_get
    if _newclass:crossProbabilities = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_crossProbabilities_get, _acqiris_QuantroDLL2.BifurcationMap_crossProbabilities_set)
    __swig_setmethods__["nPoints"] = _acqiris_QuantroDLL2.BifurcationMap_nPoints_set
    __swig_getmethods__["nPoints"] = _acqiris_QuantroDLL2.BifurcationMap_nPoints_get
    if _newclass:nPoints = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_nPoints_get, _acqiris_QuantroDLL2.BifurcationMap_nPoints_set)
    __swig_setmethods__["nSegments"] = _acqiris_QuantroDLL2.BifurcationMap_nSegments_set
    __swig_getmethods__["nSegments"] = _acqiris_QuantroDLL2.BifurcationMap_nSegments_get
    if _newclass:nSegments = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_nSegments_get, _acqiris_QuantroDLL2.BifurcationMap_nSegments_set)
    __swig_setmethods__["activeChannels"] = _acqiris_QuantroDLL2.BifurcationMap_activeChannels_set
    __swig_getmethods__["activeChannels"] = _acqiris_QuantroDLL2.BifurcationMap_activeChannels_get
    if _newclass:activeChannels = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_activeChannels_get, _acqiris_QuantroDLL2.BifurcationMap_activeChannels_set)
    __swig_setmethods__["index"] = _acqiris_QuantroDLL2.BifurcationMap_index_set
    __swig_getmethods__["index"] = _acqiris_QuantroDLL2.BifurcationMap_index_get
    if _newclass:index = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_index_get, _acqiris_QuantroDLL2.BifurcationMap_index_set)
    __swig_setmethods__["nLoops"] = _acqiris_QuantroDLL2.BifurcationMap_nLoops_set
    __swig_getmethods__["nLoops"] = _acqiris_QuantroDLL2.BifurcationMap_nLoops_get
    if _newclass:nLoops = _swig_property(_acqiris_QuantroDLL2.BifurcationMap_nLoops_get, _acqiris_QuantroDLL2.BifurcationMap_nLoops_set)
    def setRotation(self, *args): return _acqiris_QuantroDLL2.BifurcationMap_setRotation(self, *args)
    def init(self): return _acqiris_QuantroDLL2.BifurcationMap_init(self)
    def add(self, *args): return _acqiris_QuantroDLL2.BifurcationMap_add(self, *args)
    def finish(self): return _acqiris_QuantroDLL2.BifurcationMap_finish(self)
BifurcationMap_swigregister = _acqiris_QuantroDLL2.BifurcationMap_swigregister
BifurcationMap_swigregister(BifurcationMap)

class Demodulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Demodulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Demodulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _acqiris_QuantroDLL2.new_Demodulator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_Demodulator
    __del__ = lambda self : None;
    __swig_setmethods__["dimensionF"] = _acqiris_QuantroDLL2.Demodulator_dimensionF_set
    __swig_getmethods__["dimensionF"] = _acqiris_QuantroDLL2.Demodulator_dimensionF_get
    if _newclass:dimensionF = _swig_property(_acqiris_QuantroDLL2.Demodulator_dimensionF_get, _acqiris_QuantroDLL2.Demodulator_dimensionF_set)
    __swig_setmethods__["tableF"] = _acqiris_QuantroDLL2.Demodulator_tableF_set
    __swig_getmethods__["tableF"] = _acqiris_QuantroDLL2.Demodulator_tableF_get
    if _newclass:tableF = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableF_get, _acqiris_QuantroDLL2.Demodulator_tableF_set)
    __swig_setmethods__["tableOffsetI"] = _acqiris_QuantroDLL2.Demodulator_tableOffsetI_set
    __swig_getmethods__["tableOffsetI"] = _acqiris_QuantroDLL2.Demodulator_tableOffsetI_get
    if _newclass:tableOffsetI = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableOffsetI_get, _acqiris_QuantroDLL2.Demodulator_tableOffsetI_set)
    __swig_setmethods__["tableOffsetQ"] = _acqiris_QuantroDLL2.Demodulator_tableOffsetQ_set
    __swig_getmethods__["tableOffsetQ"] = _acqiris_QuantroDLL2.Demodulator_tableOffsetQ_get
    if _newclass:tableOffsetQ = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableOffsetQ_get, _acqiris_QuantroDLL2.Demodulator_tableOffsetQ_set)
    __swig_setmethods__["tableGainI"] = _acqiris_QuantroDLL2.Demodulator_tableGainI_set
    __swig_getmethods__["tableGainI"] = _acqiris_QuantroDLL2.Demodulator_tableGainI_get
    if _newclass:tableGainI = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableGainI_get, _acqiris_QuantroDLL2.Demodulator_tableGainI_set)
    __swig_setmethods__["tableGainQ"] = _acqiris_QuantroDLL2.Demodulator_tableGainQ_set
    __swig_getmethods__["tableGainQ"] = _acqiris_QuantroDLL2.Demodulator_tableGainQ_get
    if _newclass:tableGainQ = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableGainQ_get, _acqiris_QuantroDLL2.Demodulator_tableGainQ_set)
    __swig_setmethods__["tableAngleI"] = _acqiris_QuantroDLL2.Demodulator_tableAngleI_set
    __swig_getmethods__["tableAngleI"] = _acqiris_QuantroDLL2.Demodulator_tableAngleI_get
    if _newclass:tableAngleI = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableAngleI_get, _acqiris_QuantroDLL2.Demodulator_tableAngleI_set)
    __swig_setmethods__["tableAngleQ"] = _acqiris_QuantroDLL2.Demodulator_tableAngleQ_set
    __swig_getmethods__["tableAngleQ"] = _acqiris_QuantroDLL2.Demodulator_tableAngleQ_get
    if _newclass:tableAngleQ = _swig_property(_acqiris_QuantroDLL2.Demodulator_tableAngleQ_get, _acqiris_QuantroDLL2.Demodulator_tableAngleQ_set)
    __swig_setmethods__["frequencies"] = _acqiris_QuantroDLL2.Demodulator_frequencies_set
    __swig_getmethods__["frequencies"] = _acqiris_QuantroDLL2.Demodulator_frequencies_get
    if _newclass:frequencies = _swig_property(_acqiris_QuantroDLL2.Demodulator_frequencies_get, _acqiris_QuantroDLL2.Demodulator_frequencies_set)
    __swig_setmethods__["quadratures"] = _acqiris_QuantroDLL2.Demodulator_quadratures_set
    __swig_getmethods__["quadratures"] = _acqiris_QuantroDLL2.Demodulator_quadratures_get
    if _newclass:quadratures = _swig_property(_acqiris_QuantroDLL2.Demodulator_quadratures_get, _acqiris_QuantroDLL2.Demodulator_quadratures_set)
    __swig_setmethods__["quadraturesAverages"] = _acqiris_QuantroDLL2.Demodulator_quadraturesAverages_set
    __swig_getmethods__["quadraturesAverages"] = _acqiris_QuantroDLL2.Demodulator_quadraturesAverages_get
    if _newclass:quadraturesAverages = _swig_property(_acqiris_QuantroDLL2.Demodulator_quadraturesAverages_get, _acqiris_QuantroDLL2.Demodulator_quadraturesAverages_set)
    def indexCorrection(self, *args): return _acqiris_QuantroDLL2.Demodulator_indexCorrection(self, *args)
    def setCorrections(self, *args): return _acqiris_QuantroDLL2.Demodulator_setCorrections(self, *args)
    def demodulate1ChAPhi(self, *args): return _acqiris_QuantroDLL2.Demodulator_demodulate1ChAPhi(self, *args)
    def demodulate2ChAPhi(self, *args): return _acqiris_QuantroDLL2.Demodulator_demodulate2ChAPhi(self, *args)
    def demodulate1ChIQ(self, *args): return _acqiris_QuantroDLL2.Demodulator_demodulate1ChIQ(self, *args)
    def demodulate2ChIQ(self, *args): return _acqiris_QuantroDLL2.Demodulator_demodulate2ChIQ(self, *args)
    def demodulate(self, *args): return _acqiris_QuantroDLL2.Demodulator_demodulate(self, *args)
Demodulator_swigregister = _acqiris_QuantroDLL2.Demodulator_swigregister
Demodulator_swigregister(Demodulator)

class MultiplexedBifurcationMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiplexedBifurcationMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultiplexedBifurcationMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dimensionF"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_dimensionF_set
    __swig_getmethods__["dimensionF"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_dimensionF_get
    if _newclass:dimensionF = _swig_property(_acqiris_QuantroDLL2.MultiplexedBifurcationMap_dimensionF_get, _acqiris_QuantroDLL2.MultiplexedBifurcationMap_dimensionF_set)
    __swig_setmethods__["tableF"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableF_set
    __swig_getmethods__["tableF"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableF_get
    if _newclass:tableF = _swig_property(_acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableF_get, _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableF_set)
    __swig_setmethods__["tableIoffset"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableIoffset_set
    __swig_getmethods__["tableIoffset"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableIoffset_get
    if _newclass:tableIoffset = _swig_property(_acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableIoffset_get, _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableIoffset_set)
    __swig_setmethods__["tableQoffset"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableQoffset_set
    __swig_getmethods__["tableQoffset"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableQoffset_get
    if _newclass:tableQoffset = _swig_property(_acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableQoffset_get, _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableQoffset_set)
    __swig_setmethods__["tableAngle"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableAngle_set
    __swig_getmethods__["tableAngle"] = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableAngle_get
    if _newclass:tableAngle = _swig_property(_acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableAngle_get, _acqiris_QuantroDLL2.MultiplexedBifurcationMap_tableAngle_set)
    def __init__(self): 
        this = _acqiris_QuantroDLL2.new_MultiplexedBifurcationMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acqiris_QuantroDLL2.delete_MultiplexedBifurcationMap
    __del__ = lambda self : None;
    def indexCorrection(self, *args): return _acqiris_QuantroDLL2.MultiplexedBifurcationMap_indexCorrection(self, *args)
    def setRotation(self, *args): return _acqiris_QuantroDLL2.MultiplexedBifurcationMap_setRotation(self, *args)
    def rotateAndClicks(self, *args): return _acqiris_QuantroDLL2.MultiplexedBifurcationMap_rotateAndClicks(self, *args)
    def convertToProbabilities(self, *args): return _acqiris_QuantroDLL2.MultiplexedBifurcationMap_convertToProbabilities(self, *args)
MultiplexedBifurcationMap_swigregister = _acqiris_QuantroDLL2.MultiplexedBifurcationMap_swigregister
MultiplexedBifurcationMap_swigregister(MultiplexedBifurcationMap)

# This file is compatible with both classic and new-style classes.


